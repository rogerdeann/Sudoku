import random

# Function to create an empty Sudoku grid
def create_empty_grid():
    return [[0 for _ in range(9)] for _ in range(9)]

# Function to print the Sudoku grid
def print_grid(grid):
    for row in grid:
        print(" ".join(map(str, row))

# Function to check if a number is valid in a specific cell
def is_valid_move(grid, row, col, num):
    # Check row and column
    if num in grid[row] or num in [grid[i][col] for i in range(9)]:
        return False

    # Check 3x3 box
    box_row, box_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(box_row, box_row + 3):
        for j in range(box_col, box_col + 3):
            if grid[i][j] == num:
                return False

    return True

# Function to generate a Sudoku puzzle
def generate_sudoku(grid):
    for _ in range(random.randint(17, 26)):  # Adjust the range for puzzle difficulty
        row, col, num = random.randint(0, 8), random.randint(0, 8), random.randint(1, 9)
        while not is_valid_move(grid, row, col, num) or grid[row][col] != 0:
            row, col, num = random.randint(0, 8), random.randint(0, 8), random.randint(1, 9)
        grid[row][col] = num

# Function to solve Sudoku using backtracking
def solve_sudoku(grid):
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                for num in range(1, 10):
                    if is_valid_move(grid, row, col, num):
                        grid[row][col] = num
                        if solve_sudoku(grid):
                            return True
                        grid[row][col] = 0
                return False
    return True

if __name__ == "__main__":
    sudoku_grid = create_empty_grid()
    generate_sudoku(sudoku_grid)

    print("Sudoku Puzzle:")
    print_grid(sudoku_grid)

    

