import random

def create_empty_grid():
    return [[0 for _ in range(9)] for _ in range(9)]

def print_grid(grid):
    for row in grid:
        print(" ".join(map(str, row)))

def is_valid_move(grid, row, col, num):
    if num in grid[row] or num in [grid[i][col] for i in range(9)]:
        return False

    box_row, box_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(box_row, box_row + 3):
        for j in range(box_col, box_col + 3):
            if grid[i][j] == num:
                return False

    return True

def generate_sudoku(grid):
    for _ in range(random.randint(17, 26)):
        row, col, num = random.randint(0, 8), random.randint(0, 8), random.randint(1, 9)
        while not is_valid_move(grid, row, col, num) or grid[row][col] != 0:
            row, col, num = random.randint(0, 8), random.randint(0, 8), random.randint(1, 9)
        grid[row][col] = num

def solve_sudoku(grid):
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                for num in range(1, 10):
                    if is_valid_move(grid, row, col, num):
                        grid[row][col] = num
                        if solve_sudoku(grid):
                            return True
                        grid[row][col] = 0
                return False
    return True

def is_sudoku_solved(grid):
    return all(all(cell != 0 for cell in row) for row in grid)

def display_instructions():
    print("Welcome to Sudoku!")
    print("Fill the grid so that every row, column, and 3x3 box contains the numbers 1-9.")
    print("Enter row, column, and number (separated by spaces) to place your move.")
    print("Enter '0 0 0' to exit the game.")

def choose_difficulty():
    while True:
        try:
            difficulty = int(input("Choose difficulty level (1 - Easy, 2 - Medium, 3 - Hard): "))
            if difficulty in [1, 2, 3]:
                return difficulty
            else:
                print("Invalid input. Please enter 1, 2, or 3.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def play_sudoku():
    display_instructions()
    sudoku_grid = create_empty_grid()

    difficulty = choose_difficulty()
    if difficulty == 1:
        generate_sudoku(sudoku_grid)
    elif difficulty == 2:
        generate_sudoku(sudoku_grid)
        # Generate more numbers to make it easier
        for _ in range(20):
            row, col, num = random.randint(0, 8), random.randint(0, 8), random.randint(1, 9)
            while sudoku_grid[row][col] != 0:
                row, col = random.randint(0, 8), random.randint(0, 8)
            sudoku_grid[row][col] = num
    else:
        solve_sudoku(sudoku_grid)

    print("Sudoku Puzzle:")
    print_grid(sudoku_grid)

    while True:
        try:
            row, col, num = map(int, input("Enter row, column, and number (1-9) or '0 0 0' to exit: ").split())
            if row == 0 and col == 0 and num == 0:
                print("Exiting the game. Goodbye!")
                break
        except ValueError:
            print("Invalid input. Please enter three numbers separated by spaces.")
            continue

        if 1 <= row <= 9 and 1 <= col <= 9 and 1 <= num <= 9:
            if is_valid_move(sudoku_grid, row - 1, col - 1, num):
                sudoku_grid[row - 1][col - 1] = num
                print("\nUpdated Sudoku:")
                print_grid(sudoku_grid)

                if is_sudoku_solved(sudoku_grid):
                    print("Congratulations! You solved the Sudoku!")
                    break
            else:
                print("Invalid move. Try again.")
        else:
            print("Invalid input. Please enter numbers between 1 and 9.")

if __name__ == "__main__":
    play_sudoku()
